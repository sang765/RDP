name: Windows VNC Remote Desktop
run-name: Windows VNC Session by ${{ github.actor }}

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  packages: write

env:
  VNC_PASSWORD: ${{ secrets.VNC_PASSWORD }}
  WINDOWS_USER: ${{ secrets.WINDOWS_USER || 'githubrunner' }}

jobs:
  setup-windows-vnc:
    runs-on: windows-latest
    timeout-minutes: 420  # 7 giờ để bao gồm cả thời gian backup

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1

    - name: Mask sensitive values
      shell: pwsh
      run: |
        echo "::add-mask::${{ secrets.VNC_PASSWORD }}"
        echo "::add-mask::${{ secrets.NGROK_AUTH_TOKEN }}"
        echo "::add-mask::${{ secrets.PAT }}"

    - name: Get previous successful workflow run ID
      id: get_previous_run
      shell: pwsh
      run: |
        $url = "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=success&event=push&per_page=1"
        $headers = @{
          'Authorization' = "token ${{ secrets.PAT }}"
          'Accept' = 'application/vnd.github.v3+json'
        }
        try {
          $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
          if ($response.workflow_runs.Count -gt 0) {
            $runId = $response.workflow_runs[0].id
            Write-Output "Previous successful run ID: $runId"
            echo "prev_run_id=$runId" >> $env:GITHUB_OUTPUT
          } else {
            Write-Output "No previous successful run found."
            echo "prev_run_id=0" >> $env:GITHUB_OUTPUT
          }
        } catch {
          Write-Output "Error fetching previous run: $($_.Exception.Message)"
          echo "prev_run_id=0" >> $env:GITHUB_OUTPUT
        }
      env:
        PAT: ${{ secrets.PAT }}

    - name: Download backup from previous run
      uses: actions/download-artifact@v4.1.1
      with:
        name: windows-backup
        run-id: ${{ steps.get_previous_run.outputs.prev_run_id }}
        path: C:\
      continue-on-error: true

    - name: Restore backup
      shell: pwsh
      run: |
        if (Test-Path "C:\backup.zip") {
          Expand-Archive -Path "C:\backup.zip" -DestinationPath "C:\" -Force
          Remove-Item "C:\backup.zip" -Force
          Write-Output "Backup restored successfully"
        } else {
          Write-Output "No backup found, starting fresh"
        }

    - name: Create local admin user
      shell: pwsh
      run: |
        $username = "$env:WINDOWS_USER"
        
        # Kiểm tra xem user đã tồn tại chưa
        if (-not (Get-LocalUser -Name $username -ErrorAction SilentlyContinue)) {
          $password = ConvertTo-SecureString "SecurePassword123!" -AsPlainText -Force
          New-LocalUser -Name $username -Password $password -FullName "GitHub Runner" -Description "Temporary admin user for VNC"
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Write-Output "Created user: $username"
        } else {
          Write-Output "User $username already exists"
        }

    - name: Disable Windows Firewall
      shell: pwsh
      run: |
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

    - name: Install Chocolatey package manager
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        refreshenv

    - name: Install TigerVNC via Winget
      shell: pwsh
      run: |
        try {
          # Thử cài đặt qua Winget trước
          winget install TigerVNC.TigerVNC -s winget --accept-package-agreements --accept-source-agreements
          Write-Output "TigerVNC installed successfully via Winget"
        } catch {
          Write-Output "Winget installation failed, trying Chocolatey..."
          # Nếu Winget thất bại, thử cài đặt qua Chocolatey
          choco install tigervnc -y
          Write-Output "TigerVNC installed successfully via Chocolatey"
        }

    - name: Install Ngrok via Winget
      shell: pwsh
      run: |
        try {
          # Thử cài đặt qua Winget trước
          winget install Ngrok.Ngrok -s winget --accept-package-agreements --accept-source-agreements
          Write-Output "Ngrok installed successfully via Winget"
        } catch {
          Write-Output "Winget installation failed, trying Chocolatey..."
          # Nếu Winget thất bại, thử cài đặt qua Chocolatey
          choco install ngrok -y
          Write-Output "Ngrok installed successfully via Chocolatey"
        }

    - name: Set VNC password
      shell: pwsh
      run: |
        # Tạo file password cho VNC
        $vncPasswdPath = "$env:ProgramFiles\TigerVNC\vncpasswd.exe"
        if (Test-Path $vncPasswdPath) {
          $tempPassFile = "C:\vncpass.txt"
          # Tạo file với password (2 dòng giống nhau)
          echo "$env:VNC_PASSWORD" | Out-File -FilePath $tempPassFile -Encoding ASCII
          echo "$env:VNC_PASSWORD" | Out-File -FilePath $tempPassFile -Encoding ASCII -Append
          
          # Thiết lập password
          Get-Content $tempPassFile | & "$vncPasswdPath" -f
          Remove-Item $tempPassFile -Force
          Write-Output "VNC password set successfully"
        } else {
          Write-Error "VNC password utility not found at $vncPasswdPath"
        }

    - name: Start TigerVNC Server
      shell: pwsh
      run: |
        # Khởi động VNC server
        $vncServerPath = "$env:ProgramFiles\TigerVNC\vncserver.exe"
        if (Test-Path $vncServerPath) {
          # Cài đặt service
          & "$vncServerPath" -service -install
          # Khởi động service
          Start-Service -Name "tigervnc"
          Write-Output "VNC server started successfully"
        } else {
          Write-Error "VNC server not found at $vncServerPath"
        }

    - name: Configure Ngrok
      shell: pwsh
      env:
        NGROK_AUTH_TOKEN: "${{ secrets.NGROK_AUTH_TOKEN }}"
      run: |
        # Thiết lập auth token cho Ngrok
        ngrok authtoken $env:NGROK_AUTH_TOKEN
        Write-Output "Ngrok authtoken configured"

    - name: Expose VNC port with Ngrok
      shell: pwsh
      run: |
        # Khởi động Ngrok để expose cổng VNC
        Start-Process -FilePath "ngrok" -ArgumentList "tcp 5900 --log stdout" -WindowStyle Hidden
        Start-Sleep -Seconds 5  # Chờ Ngrok khởi động

    - name: Get Ngrok connection info
      shell: pwsh
      run: |
        # Lấy thông tin kết nối từ Ngrok
        $maxRetries = 10
        $retryCount = 0
        $success = $false
        
        while (-not $success -and $retryCount -lt $maxRetries) {
          try {
            $ngrokInfo = (Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels" -UseBasicParsing).Content | ConvertFrom-Json
            $vncUrl = $ngrokInfo.tunnels[0].public_url
            $vncHost = $vncUrl -replace "tcp://", ""
            $vncHost, $vncPort = $vncHost -split ":"
            
            Write-Output "VNC Connection URL: $vncUrl"
            Write-Output "VNC Host: $vncHost"
            Write-Output "VNC Port: $vncPort"
            Write-Output "VNC Password: ***"  # Password đã được mask
            
            echo "vnc_url=$vncUrl" >> $env:GITHUB_OUTPUT
            echo "vnc_host=$vncHost" >> $env:GITHUB_OUTPUT
            echo "vnc_port=$vncPort" >> $env:GITHUB_OUTPUT
            
            $success = $true
          } catch {
            $retryCount++
            Write-Output "Attempt $retryCount failed: $($_.Exception.Message)"
            Start-Sleep -Seconds 5
          }
        }
        
        if (-not $success) {
          Write-Error "Failed to get Ngrok connection info after $maxRetries attempts"
        }
      id: ngrok_info

    - name: Display connection info
      shell: pwsh
      run: |
        Write-Output "=== VNC CONNECTION INFORMATION ==="
        Write-Output "Host: ${{ steps.ngrok_info.outputs.vnc_host }}"
        Write-Output "Port: ${{ steps.ngrok_info.outputs.vnc_port }}"
        Write-Output "Password: ***"  # Password đã được mask
        Write-Output "URL: ${{ steps.ngrok_info.outputs.vnc_url }}"
        Write-Output "=================================="

    - name: Keep alive for 6 hours
      shell: pwsh
      run: |
        Write-Output "Remote desktop will be available for 6 hours"
        
        # Script keep-alive để duy trì kết nối
        $keepAliveScript = @"
        `$duration = 6 * 60 * 60  # 6 giờ
        `$startTime = Get-Date
        `$checkInterval = 300  # 5 phút
        
        while (((Get-Date) - `$startTime).TotalSeconds -lt `$duration) {
            `$elapsed = [math]::Round(((Get-Date) - `$startTime).TotalSeconds)
            `$remaining = `$duration - `$elapsed
            `$hours = [math]::Floor(`$remaining / 3600)
            `$minutes = [math]::Floor((`$remaining % 3600) / 60)
            `$seconds = `$remaining % 60
            
            Write-Output "Keeping alive... Time remaining: `${hours}h `${minutes}m `${seconds}s"
            
            # Kiểm tra và khởi động lại VNC nếu cần
            `$vncService = Get-Service -Name "tigervnc" -ErrorAction SilentlyContinue
            if (`$vncService.Status -ne "Running") {
                try {
                    Start-Service -Name "tigervnc"
                    Write-Output "Restarted TigerVNC service"
                } catch {
                    Write-Output "Failed to restart TigerVNC service: `$(`$_.Exception.Message)"
                }
            }
            
            # Kiểm tra và khởi động lại Ngrok nếu cần
            `$ngrokProcess = Get-Process -Name "ngrok" -ErrorAction SilentlyContinue
            if (-not `$ngrokProcess) {
                try {
                    Start-Process -FilePath "ngrok" -ArgumentList "tcp 5900 --log stdout" -WindowStyle Hidden
                    Write-Output "Restarted Ngrok process"
                } catch {
                    Write-Output "Failed to restart Ngrok process: `$(`$_.Exception.Message)"
                }
            }
            
            Start-Sleep -Seconds `$checkInterval
        }
        
        Write-Output "Keep-alive period completed"
        "@
        $keepAliveScript | Out-File -FilePath "C:\keep-alive.ps1" -Encoding UTF8
        & "C:\keep-alive.ps1"

    - name: Create backup
      shell: pwsh
      run: |
        $backupFolders = @(
          "$env:USERPROFILE\AppData",
          "$env:USERPROFILE\Documents", 
          "$env:USERPROFILE\Downloads",
          "$env:USERPROFILE\LocalAppData"
        )
        Compress-Archive -Path $backupFolders -DestinationPath "C:\backup.zip" -CompressionLevel Optimal -Force
        Write-Output "Backup created successfully"

    - name: Upload backup to artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: windows-backup
        path: C:\backup.zip
        retention-days: 7

    - name: Trigger new workflow
      shell: pwsh
      env:
        PAT: "${{ secrets.PAT }}"
      run: |
        $headers = @{
          Authorization = "token $env:PAT"
          Accept = "application/vnd.github.v3+json"
        }
        $body = @{
          ref = "main"
        } | ConvertTo-Json
        try {
          Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-vnc.yml/dispatches" -Method Post -Headers $headers -Body $body
          Write-Output "New workflow triggered successfully"
        } catch {
          Write-Output "Failed to trigger new workflow: $($_.Exception.Message)"
        }

    - name: Cleanup
      shell: pwsh
      run: |
        # Dừng các dịch vụ
        Stop-Service -Name "tigervnc" -ErrorAction SilentlyContinue
        Get-Process | Where-Object { $_.Name -like "*ngrok*" } | Stop-Process -Force -ErrorAction SilentlyContinue
        
        # Xóa file tạm
        Remove-Item -Path "C:\backup.zip", "C:\keep-alive.ps1" -Force -ErrorAction SilentlyContinue
        
        Write-Output "Cleanup completed"
