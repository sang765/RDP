name: Windows VNC Remote Desktop
run-name: Windows VNC Session by ${{ github.actor }}

on:
  workflow_dispatch: {}
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  setup-windows-vnc:
    runs-on: windows-latest
    timeout-minutes: 420  # 7 giờ để bao gồm cả thời gian backup

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1

    - name: Mask sensitive values
      run: |
        echo "::add-mask::${{ secrets.VNC_PASSWORD }}"
        echo "::add-mask::${{ secrets.NGROK_AUTH_TOKEN }}"
        echo "::add-mask::${{ secrets.PAT }}"

    - name: Create local admin user
      shell: pwsh
      run: |
        $username = "${{ secrets.WINDOWS_USER }}"
        if ([string]::IsNullOrEmpty($username)) {
          $username = "githubrunner"
        }
        $password = ConvertTo-SecureString "SecurePassword123!" -AsPlainText -Force
        New-LocalUser -Name $username -Password $password -FullName "GitHub Runner" -Description "Temporary admin user for VNC"
        Add-LocalGroupMember -Group "Administrators" -Member $username
        Write-Output "Created user: $username"

    - name: Restore backup from artifact
      uses: actions/download-artifact@v4.1.4
      with:
        name: windows-backup
        path: C:\
      continue-on-error: true

    - name: Disable Windows Firewall
      shell: pwsh
      run: |
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

    - name: Setup TigerVNC
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://github.com/TigerVNC/tigervnc/releases/download/v1.13.1/vncviewer-1.13.1.exe" -OutFile "C:\vncviewer.exe"
        Invoke-WebRequest -Uri "https://github.com/TigerVNC/tigervnc/releases/download/v1.13.1/vncserver-1.13.1.exe" -OutFile "C:\vncserver.exe"
        Start-Process -FilePath "C:\vncserver.exe" -ArgumentList "/quiet /norestart" -Wait

    - name: Set fixed VNC password
      shell: pwsh
      env:
        VNC_PASSWORD: "${{ secrets.VNC_PASSWORD }}"
      run: |
        $passwordFile = "C:\vncpasswd.txt"
        Write-Output "$env:VNC_PASSWORD" | Out-File -FilePath $passwordFile -Encoding ASCII
        # Thiết lập password cho VNC server
        # Lưu ý: Đây là phần cần được điều chỉnh theo cách TigerVNC lưu trữ password

    - name: Install Ngrok
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "C:\ngrok.zip"
        Expand-Archive -Path "C:\ngrok.zip" -DestinationPath "C:\ngrok"
        Copy-Item "C:\ngrok\ngrok.exe" "C:\Windows\System32\ngrok.exe"

    - name: Start TigerVNC Server
      shell: pwsh
      run: |
        # Khởi động VNC server trên cổng 5900
        Start-Process -FilePath "C:\vncserver.exe" -ArgumentList "-rfbport 5900 -rfbauth C:\vncpasswd.txt"

    - name: Expose VNC port with Ngrok
      shell: pwsh
      env:
        NGROK_AUTH_TOKEN: "${{ secrets.NGROK_AUTH_TOKEN }}"
      run: |
        ngrok authtoken $env:NGROK_AUTH_TOKEN
        Start-Process -FilePath "ngrok" -ArgumentList "tcp 5900"

    - name: Get Ngrok connection info
      shell: pwsh
      run: |
        Start-Sleep -Seconds 5
        $ngrokInfo = (Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels").Content | ConvertFrom-Json
        $vncUrl = $ngrokInfo.tunnels[0].public_url
        Write-Output "VNC Connection URL: $vncUrl"
        Write-Output "VNC Password: ***"  # Password đã được mask

    - name: Keep alive for 6 hours
      shell: pwsh
      run: |
        Write-Output "Remote desktop will be available for 6 hours"
        Start-Sleep -Seconds 21600  # 6 giờ

    - name: Backup important folders
      shell: pwsh
      run: |
        Compress-Archive -Path "$env:USERPROFILE\AppData", "$env:USERPROFILE\Downloads", "$env:USERPROFILE\Documents" -DestinationPath "C:\backup.zip"

    - name: Upload backup to artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: windows-backup
        path: C:\backup.zip

    - name: Trigger new workflow
      shell: pwsh
      env:
        PAT: "${{ secrets.PAT }}"
      run: |
        $headers = @{
          Authorization = "token $env:PAT"
          Accept = "application/vnd.github.v3+json"
        }
        $body = @{
          ref = "main"
        } | ConvertTo-Json
        Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-vnc.yml/dispatches" -Method Post -Headers $headers -Body $body

    - name: Cleanup
      shell: pwsh
      run: |
        Get-Process | Where-Object { $_.Name -like "*vnc*" -or $_.Name -like "*ngrok*" } | Stop-Process -Force
        Remove-Item -Path "C:\vncviewer.exe", "C:\vncserver.exe", "C:\ngrok.zip" -Force
        Remove-Item -Path "C:\ngrok" -Recurse -Force
